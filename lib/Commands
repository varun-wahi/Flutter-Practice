                                                        TEXT AND TEXT-STYLE
child: Container(
            height: 100,
            width: 100,
            color: Colors.green,

            child: Center(child: Text("Hello",
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 25,
                  fontWeight: FontWeight.bold,
                  //backgroundColor: Colors.green

                )
            )
            ),
          ),
      ),


      ////////////////////////////////////////////////////  Buttons //////////////////////////////////////////////
      TextButton, Elevated Button, Outlined Button
      TextButton(
              //   child: Text("hello"),
              //   onPressed: (){
              //     print('Text Button Pressed!');
              //   },
              //   onLongPress: (){
              //     print("Long pressed");
              //   }
              // )
      ///////////////////////////////////////////////// IMAGE   ////////////////////////////////////////
      Container(
                  child: Image.asset('assets/images/orange (2).jpg'),
                  width: 200,
                  height: 200,
                 )


      ///////////////////////////////////////////////// ROWS AND COLUMNS   ////////////////////////////////////////
                 Container(
                         width: 500,
                         child: Column(
                           mainAxisAlignment: MainAxisAlignment.spaceAround, //vertical alignment
                           crossAxisAlignment: CrossAxisAlignment.center,
                           children: [
                             Text('1', style: TextStyle(fontSize: 25),),
                             Text('2', style: TextStyle(fontSize: 25),),
                             Text('3', style: TextStyle(fontSize: 25),),
                             ElevatedButton(
                               onPressed: (){
                                 print("hello");
                               },
                               child:const Text("press me"),
                             ),

                           ],
                         ),
                       )
      ///////////////////////////////////////////////// INKWELL   ////////////////////////////////////////

      - INKWELL OFFERS features like onPressed, long press, on double press, etc.
      - This can be used on widgets to add these features to them
      - Widget will be the child of inkwell widget

       body:Center(
              child: InkWell( //onTap, onLongPress, onDoubleTap,
                onTap: (){
                  print("Container Tapped");
                },
                onLongPress: (){
                  print("Container Long Pressed");
                },
                child: Container(
                  width: 200,
                  height: 200,
                  color: Colors.black12,
                  child:  Center(
                      child: InkWell(
                          onTap:(){
                            print("text tapped");
                          } ,
                          child: Text("press me", style: TextStyle(fontSize: 50),)
                      )
                  ),
                ),
              ),
            )

      ///////////////////////////////////////////////// SCROLL-VIEW   ////////////////////////////////////////
Padding(
        padding: const EdgeInsets.all(8.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    children: [
                      Container(
                        margin: const EdgeInsets.only(right: 10),
                        height: 200,
                        width: 200,
                        color: Colors.green,

                          ),
                      Container(
                        height: 200,
                        width: 200,
                        margin: const EdgeInsets.only(right: 10),
                        color: Colors.red,

                      ),
                      Container(
                        margin: const EdgeInsets.only(right: 10),
                        height: 200,
                        width: 200,
                        color: Colors.yellow,

                      ),
                      Container(
                        margin: const EdgeInsets.only(right: 10),
                        height: 200,
                        width: 200,
                        color: Colors.blue,

                      ),
                    ],
                  ),
                ),
              ),
              Container(
                margin: const EdgeInsets.only(bottom: 10),
                height: 200,

                color: Colors.yellowAccent,

              ),
              Container(
                margin: const EdgeInsets.only(bottom: 10),
                height: 200,

                color: Colors.red,

              ),
              Container(
                margin: const EdgeInsets.only(bottom: 10),
                height: 200,

                color: Colors.blue,

              ),
              Container(
                margin: const EdgeInsets.only(bottom: 10),
                height: 200,

                color: Colors.green,

              ),
              Container(
                margin: const EdgeInsets.only(bottom: 10),
                height: 200,
                color: Colors.yellowAccent,

              ),
            ],
          ),
        ),
      )


      ///////////////////////////////////////////////// LIST-VIEW OR LIST VIEW BUILDER  ////////////////////////////////////////
      - List of similar widgets with different content in a linear way
      - like contacts
      -List view builder is used for making dynamic list (where no of contents in list is not specified)
      - In Builder, one item of list is defined with array of contents, and all items will be similar

      ListView(
              scrollDirection: Axis.vertical,
              reverse: false,
              children: [
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Container(
                    height: 200,
                    width: 200,
                    color: Colors.yellow,
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Container(
                    height: 200,
                    width: 200,
                    color: Colors.green,
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Container(
                    height: 200,
                    width: 200,
                    color: Colors.blue,
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Container(
                    height: 200,
                    width: 200,
                    color: Colors.red,
                  ),
                ),
              ],
            )


//NOW LIST VIEW BUILDER
//List names and colors given

ListView.builder(itemBuilder: (context, index){
        return Padding(
          padding: const EdgeInsets.all(8.0),
          child: Container(
            width: 200,
            height: 200,
            color: colors[index],
            child: Center(
              child: Text(names[index], style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold),),
            ),
          ),
        );
      },
      itemCount: names.length,
      )

//NOW LIST VIEW SEPERATED

ListView.separated(itemBuilder: (context, index){
        return Padding(
          padding: const EdgeInsets.all(8.0),
          child: Container(
            width: 200,
            height: 200,
            color: colors[index],
            child: Center(
              child: Text(names[index], style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold),),
            ),
          ),
        );
      },
        itemCount: names.length,
        separatorBuilder: (context, index){
          return Divider(height: 4, thickness: 3,);
        },
      )
/////////////////////////// STEP BY STEP IMPLEMENTATION //////////////////////////////////
1.   Call main function:

    void main(){
      runApp(PractoApp());
    }

2.  - Create App class inhereting from stateless widget:
    - Return Material app or Cupertino App according to needs and requirements
    - Material app will have TITLE and THEME data, and mainly HOME for homepage

        class PractoApp extends StatelessWidget {
          @override
          Widget build(BuildContext context) {
            return MaterialApp(
              title: "Practo App",
              theme: ThemeData(
                primarySwatch: Colors.indigo
              ),
              home: DashBoardScreen(),
            );
          }

      }

3.  - Create a HomePage class and name it whatever you want (such as DashBoardScreen)
    - In Material App, to create a page Scaffold Widget is used.
    - Scaffold widget contains appBar, body mainly

        class DashBoardScreen extends StatelessWidget{
          @override
          Widget build(BuildContext context) {
            return Scaffold(
              appBar: AppBar(
                title: Center(child: Text("Practo")),
              ),
              body: Center(
                child: Container(
                  color: Colors.red,
                  width: 300,
                  height: 300,
                ),
              ),
            );
          }


///////////////////////////////////////////////// CONTAINER DECORATION  ////////////////////////////////////////

Container(
        color: Colors.white,
        width: double.infinity, //takes full space of screen
        height: double.infinity,

        child: Center(
          child: Container(
            height: 200,
            width: 200,
            //color: Colors.lightGreen,
            //decoration to decorate box further
            //remove color parameter from container when using decoration
            decoration: BoxDecoration(
              color: Colors.blue,

              borderRadius: BorderRadius.circular(22),
                // BorderRadius.only(topLeft: Radius.circular(22),bottomRight: Radius.circular(22)),
                //BorderRadius.circle is better alternative to BR.all
                //Border radius offers all, circular,only for one corner
                //In only, we have to use Radius class in order to provide radius instead of
                //directly providing a double value for radius

              border: Border.all(
                color: Colors.black,
                width: 1,
              ),

              boxShadow: [BoxShadow(
                blurRadius: 3,
                color: Colors.grey,
                //spreadRadius: 3,
              ),
              ],

              //shape: BoxShape.circle // .rectangle by default



            ),
          ),
        ),
      ),
      ///////////////////////////////////////////////// EXPANDED WIDGET  ////////////////////////////////////////

        - Used when in a row column division, we need to divide widgets in a ratio
        - flex parameter can be used to define ration between all expanded widgets in a row or column
        instead of equally dividing between all expanded widgets
        - flex by default is set to 1
        - works on main axis by default according to whether row or column is being used

            Column( //OR ROW
                    // mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Container(
                        // width: 50,
                        height: 100,
                        color: Colors.blue,
                        ) ,

                      Expanded(
                        flex: 1,
                        child: Container(
                          // width: 50,
                          height: 100,
                          color: Colors.orange,

                          ) ,
                        ),

                      Expanded(
                        flex: 2,
                        child: Container(
                          // width: 50,
                          height: 100,
                          color: Colors.yellow,

                          ) ,
                        ),

                      Container(
                        // width: 50,
                        height: 100,
                        color: Colors.red,

                        ) ,
                    ],
                  )

      ///////////////////////////////////////////////// MARGIN PADDING  ////////////////////////////////////////
      - Margin is to distinguish b/w different widgets
      - Padding is reqd. when widget within a widget needs to be distinguished

        Padding(
                padding: const EdgeInsets.all(3.5), //EdgeInsets only used for one side
                child: Column( //OR ROW
                  // mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Container(
                      margin: EdgeInsets.only(bottom: 5),
                      // width: 50,
                      height: 100,
                      color: Colors.blue,
                      ) ,

                    Expanded(
                      flex: 1,
                      child: Container(
                        margin: EdgeInsets.only(bottom: 5),
                        // width: 50,
                        height: 100,
                        color: Colors.orange,

                        ) ,
                      ),

                    Expanded(
                      flex: 2,
                      child: Container(
                        margin: EdgeInsets.only(bottom: 5),
                        // width: 50,
                        height: 100,
                        color: Colors.yellow,

                        ) ,
                      ),

                    Container(
                      // width: 50,
                      height: 100,
                      color: Colors.red,

                      ) ,
                  ],
                ),
              )

      ///////////////////////////////////////////////// LIST TILE AND BUILDER  ////////////////////////////////////////

        ListView.separated(itemBuilder: (context, index){
                return ListTile(
                  leading: Text('${index+1}'),
                  title: Text(names[index]+ " (title)"),
                  subtitle: Text('Number (subtitle)'),
                  trailing: Icon(Icons.add),
                );

              },
              itemCount: names.length,
                separatorBuilder: (context, index){
                return Divider(height: 20,thickness: 1,);
                },
              )

 ///////////////////////////////////////////////// PRACTICE LIST APP  ////////////////////////////////////////

    Widget build(BuildContext context) {

        var names= ['varun','arun', 'tarun', 'charun', 'karun', 'jarun', 'tarun', 'tarun'];
        var colors = [Colors.red, Colors.blue, Colors.yellow, Colors.green, Colors.orange, Colors.pinkAccent, Colors.amber, Colors.cyan];

        return Scaffold(
          appBar: AppBar(
            title: Center(child: const Text("Practo")),
          ),
          body:
            ListView.builder(itemBuilder: (context, index){
              return Padding(
                padding: const EdgeInsets.all(3.0),
                child: Center(
                  child: InkWell(

                    onTap: (){
                      print("Hello Index: $index");
                    },
                    child: Container(
                      height: 100,
                      width: double.infinity,

                      child: Center(child: Text(names[index], style: TextStyle(fontWeight: FontWeight.bold, fontSize: 25, color: Colors.white))),
                      decoration: BoxDecoration(
                      color: colors[index],
                      borderRadius: BorderRadius.circular(10),
                    ),
                    ),
                  ),
                ),
              );
            },
            itemCount: names.length,
            )
        );
      }


 ///////////////////////////////////////////////// CIRCLE AVATAR  ////////////////////////////////////////
    -   Making a contact list using flutter

        ListView.separated(itemBuilder: (context, index){
                  return ListTile(
                    leading: CircleAvatar(
                      // child: Text('$index'),
                      maxRadius: 20,
                      backgroundImage: AssetImage('assets/images/contact_avatar.png'),
                      backgroundColor: colors[index],

                    ),
                    title: Text('${names[index]}'),
                    subtitle: Text('${index+1}'*10),

                    trailing: Icon(Icons.add),
                  );
                },
                    separatorBuilder: (context, index){
                      return Divider(height: 5,thickness: 4,);
                    },
                    itemCount: names.length)

 ///////////////////////////////////////////////// FONT STYLE  ////////////////////////////////////////
    - Download fonts from google fonts
    - Make a directory in assets folder named fonts and place .ttf files
    - Go to the pubspec.yaml file and add font family to the file
    - press pub get button to update file
    - use this font using style in Text


    1. In ThemeData define different styles as such;

        theme: ThemeData(
                primarySwatch: Colors.indigo,
                textTheme: TextTheme(
                  headline1: TextStyle(fontSize:50, fontWeight: FontWeight.bold,),
                  subtitle1: TextStyle(fontSize:20, fontWeight: FontWeight.normal,color: Colors.grey, fontStyle: FontStyle.italic,),
                ),
                fontFamily: 'Roboto',

              ),


    2. Then in Text Widgets, you can use these pre-defined styles as follows

    Column(
              children: [
                Center(
                    child: Text(
                        "Headline1 text testing",
                        style:Theme.of(context).textTheme.headline1
                    )
                ),

                Center(
                    child: Text(
                        "Subtitle 1 testing",
                        style:Theme.of(context).textTheme.subtitle1
                    )
                ),
              ],
            )

    3. In order to extend a style, we can us copyWith() function.
       All other attributes will be copied

            Text(
                "Subtitle 1 testing",
                style:Theme.of(context).textTheme.subtitle1!.copyWith(color: Colors.red)
                )

    4. - Now these headline1, headline2, etc are only limited no of themes for text
       - So the best solution is to create a new directory named "ui_helper" in "lib" folder
       - Create a new dart file called "util.dart" or anything

            import 'dart:ui';
            import 'package:flutter/material.dart';

            TextStyle TextStyle1(){
              return TextStyle(
                fontSize: 11,
                fontWeight: FontWeight.bold,
                color: Colors.grey
                //blah blah other attributes
              );
            }

            TextStyle TextStyle2(){
              return TextStyle(
                  fontSize: 21,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey
                //blah blah other attributes
              );
            }

            TextStyle TextStyle3(){
              return TextStyle(
                  fontSize: 11,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey
                //blah blah other attributes
              );
            }

            TextStyle TextStyle4(){
              return TextStyle(
                  fontSize: 11,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey
                //blah blah other attributes
              );
            }

 5. Import util package in main.dart file

        import lib/ui_helper/util.dart

        Text(
                          "Util package testing",
                          style:TextStyle1()
                      ),

 6. For further customisation in fonts styles in utils.dart add inside{} inside parameter of the funciton]\

        TextStyle TextStyle1({
          Color textColor = Colors.black,
          FontWeight fontWeight = FontWeight.normal
        })
        {
          return TextStyle(
            fontSize: 11,
            fontWeight: FontWeight.bold,
            color: Colors.grey
            //blah blah other attributes
          );
        }


///////////////////////////////////////////////// CARD WIDGET  ////////////////////////////////////////

    - Elevated cards with shadows underneath
    - Looks more stylish
    - Such as in Contact List

        Card(
                  shadowColor: Colors.pinkAccent,
                  elevation: 5,
                    child: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Text("Text", style: TextStyle1(),),
                    ),
                ),

